!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module intersectionAPI ! in
    interface  ! in :intersectionAPI
        module intersectionapi ! in :intersectionAPI:intersectionAPI.F90
            use precision
            integer(kind=inttype), allocatable,dimension(:,:) :: barsconn
            real(kind=realtype), allocatable,dimension(:,:) :: coor
            integer(kind=inttype), allocatable,dimension(:,:) :: parenttria
            subroutine computeintersection(nnodesa,ntriaa,nquadsa,nnodesb,ntriab,nquadsb,coora,triaconna,quadsconna,coorb,triaconnb,quadsconnb,disttol) ! in :intersectionAPI:intersectionAPI.F90:intersectionapi
                use intersection
                use utilities
                integer(kind=inttype), optional,intent(in),check(shape(coora,1)==nnodesa),depend(coora) :: nnodesa=shape(coora,1)
                integer(kind=inttype), optional,intent(in),check(shape(triaconna,1)==ntriaa),depend(triaconna) :: ntriaa=shape(triaconna,1)
                integer(kind=inttype), optional,intent(in),check(shape(quadsconna,1)==nquadsa),depend(quadsconna) :: nquadsa=shape(quadsconna,1)
                integer(kind=inttype), optional,intent(in),check(shape(coorb,1)==nnodesb),depend(coorb) :: nnodesb=shape(coorb,1)
                integer(kind=inttype), optional,intent(in),check(shape(triaconnb,1)==ntriab),depend(triaconnb) :: ntriab=shape(triaconnb,1)
                integer(kind=inttype), optional,intent(in),check(shape(quadsconnb,1)==nquadsb),depend(quadsconnb) :: nquadsb=shape(quadsconnb,1)
                real(kind=realtype) dimension(3,nnodesa),intent(in) :: coora
                integer(kind=inttype) dimension(3,ntriaa),intent(in) :: triaconna
                integer(kind=inttype) dimension(4,nquadsa),intent(in) :: quadsconna
                real(kind=realtype) dimension(3,nnodesb),intent(in) :: coorb
                integer(kind=inttype) dimension(3,ntriab),intent(in) :: triaconnb
                integer(kind=inttype) dimension(4,nquadsb),intent(in) :: quadsconnb
                real(kind=realtype) intent(in) :: disttol
            end subroutine computeintersection
            subroutine computeintersection_b(nnodesa,ntriaa,nquadsa,nnodesb,ntriab,nquadsb,nnodesint,nbarsint,coora,coorab,triaconna,quadsconna,coorb,coorbb,triaconnb,quadsconnb,coorint,coorintb,barsconnint,parenttria) ! in :intersectionAPI:intersectionAPI.F90:intersectionapi
                use intersection_b, only: tritriintersect_b
                use intersection
                use utilities
                integer(kind=inttype), optional,intent(in),check(shape(coora,1)==nnodesa),depend(coora) :: nnodesa=shape(coora,1)
                integer(kind=inttype), optional,intent(in),check(shape(triaconna,1)==ntriaa),depend(triaconna) :: ntriaa=shape(triaconna,1)
                integer(kind=inttype), optional,intent(in),check(shape(quadsconna,1)==nquadsa),depend(quadsconna) :: nquadsa=shape(quadsconna,1)
                integer(kind=inttype), optional,intent(in),check(shape(coorb,1)==nnodesb),depend(coorb) :: nnodesb=shape(coorb,1)
                integer(kind=inttype), optional,intent(in),check(shape(triaconnb,1)==ntriab),depend(triaconnb) :: ntriab=shape(triaconnb,1)
                integer(kind=inttype), optional,intent(in),check(shape(quadsconnb,1)==nquadsb),depend(quadsconnb) :: nquadsb=shape(quadsconnb,1)
                integer(kind=inttype), optional,intent(in),check(shape(coorint,1)==nnodesint),depend(coorint) :: nnodesint=shape(coorint,1)
                integer(kind=inttype), optional,intent(in),check(shape(barsconnint,1)==nbarsint),depend(barsconnint) :: nbarsint=shape(barsconnint,1)
                real(kind=realtype) dimension(3,nnodesa),intent(in) :: coora
                real(kind=realtype) dimension(3,nnodesa),intent(out),depend(nnodesa) :: coorab
                integer(kind=inttype) dimension(3,ntriaa),intent(in) :: triaconna
                integer(kind=inttype) dimension(4,nquadsa),intent(in) :: quadsconna
                real(kind=realtype) dimension(3,nnodesb),intent(in) :: coorb
                real(kind=realtype) dimension(3,nnodesb),intent(out),depend(nnodesb) :: coorbb
                integer(kind=inttype) dimension(3,ntriab),intent(in) :: triaconnb
                integer(kind=inttype) dimension(4,nquadsb),intent(in) :: quadsconnb
                real(kind=realtype) dimension(3,nnodesint),intent(in) :: coorint
                real(kind=realtype) dimension(3,nnodesint),intent(in),depend(nnodesint) :: coorintb
                integer(kind=inttype) dimension(2,nbarsint),intent(in) :: barsconnint
                integer(kind=inttype) dimension(2,nbarsint),intent(in),depend(nbarsint) :: parenttria
            end subroutine computeintersection_b
            subroutine releasememory ! in :intersectionAPI:intersectionAPI.F90:intersectionapi
            end subroutine releasememory
            subroutine testtri(v0,v1,v2,u0,u1,u2,intersect,vecstart,vecend) ! in :intersectionAPI:intersectionAPI.F90:intersectionapi
                use intersection
                real(kind=realtype) dimension(3),intent(in) :: v0
                real(kind=realtype) dimension(3),intent(in) :: v1
                real(kind=realtype) dimension(3),intent(in) :: v2
                real(kind=realtype) dimension(3),intent(in) :: u0
                real(kind=realtype) dimension(3),intent(in) :: u1
                real(kind=realtype) dimension(3),intent(in) :: u2
                integer(kind=inttype) intent(out) :: intersect
                real(kind=realtype) dimension(3),intent(out) :: vecstart
                real(kind=realtype) dimension(3),intent(out) :: vecend
            end subroutine testtri
        end module intersectionapi
    end interface
end python module intersectionAPI

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
