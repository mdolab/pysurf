!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module march__user__routines 
    interface march_user_interface 
        subroutine py_projection(rstart,rnext,nnext,storedict,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march:unknown_interface
            real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(out) :: rnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(out) :: nnext
            integer(kind=inttype),intent(in) :: storedict
            integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
        end subroutine py_projection
    end interface march_user_interface
end python module march__user__routines
python module march_d__user__routines 
    interface march_d_user_interface 
        subroutine py_projection_d(rstart,rstartd,rnext,rnextd,nnext,nnextd,layerid,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march_d:unknown_interface
            real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
            real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rstartd
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnext
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(out) :: rnextd
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(out) :: nnextd
            integer(kind=inttype),intent(in) :: layerid
            integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
        end subroutine py_projection_d
    end interface march_d_user_interface
end python module march_d__user__routines
python module march_b__user__routines 
    interface march_b_user_interface 
        subroutine py_projection_b(rsmoothed,rsmoothedb,rnext,rnextb,nnext,nnextb,layerid,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march_b:unknown_interface
            real(kind=realtype) dimension(3 * numnodes), intent(in) :: rsmoothed
            real(kind=realtype) dimension(3 * numnodes), intent(out), depend(numnodes) :: rsmoothedb
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnext
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnextb
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnextb
            integer(kind=inttype),intent(in) :: layerid
            integer(kind=inttype), optional,intent(in),check((len(rsmoothed))/(3)>=numnodes),depend(rsmoothed) :: numnodes=(len(rsmoothed))/(3)
        end subroutine py_projection_b
    end interface march_b_user_interface
end python module march_b__user__routines
python module hypsurfAPI ! in 
    interface  ! in :hypsurfAPI
        module hypsurfapi ! in :hypsurfAPI:hypsurfAPI.F90
            use hypsurfmain
            use precision
            real(kind=realtype), allocatable,dimension(:,:) :: r_initial_march
            real(kind=realtype), allocatable,dimension(:,:) :: r_smoothed
            real(kind=realtype), allocatable,dimension(:,:) :: r_final
            real(kind=realtype), allocatable,dimension(:,:) :: s
            real(kind=realtype), allocatable,dimension(:,:,:) :: n
            subroutine march(py_projection,rstart,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,extension_given,numsmoothingpasses,numareapasses,numlayers,numnodes,r,fail,ratios,majorindices) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use march__user__routines
                external py_projection
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                logical intent(in) :: extension_given
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: r
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(numlayers - 1,numnodes - 1),intent(out),depend(numlayers,numnodes) :: ratios
                integer(kind=inttype) dimension(numlayers),intent(out),depend(numlayers) :: majorindices
            end subroutine march
            subroutine march_d(py_projection_d,rstart,rstartd,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,extension_given,numsmoothingpasses,numareapasses,numlayers,numnodes,r,rd,fail,ratios,majorindices) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use march_d__user__routines
                use hypsurfmain_d, only: computematrices_main_d,areafactor_d,findratio_d,findradius_d,smoothing_main_d
                external py_projection_d
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rstartd
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                logical intent(in) :: extension_given
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: r
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: rd
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(numlayers - 1,numnodes - 1),intent(out),depend(numlayers,numnodes) :: ratios
                integer(kind=inttype) dimension(numlayers),intent(out),depend(numlayers) :: majorindices
            end subroutine march_d
            subroutine march_b(py_projection_b,rstart,rstartb,r_initial_march,r_smoothed,r_final,n,majorindices,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,extension_given,numsmoothingpasses,numareapasses,numlayers,numnodes,nsubiters,r,rb,fail,ratios) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: smoothing_main_b,findradius_b,computematrices_main_b,findratio_b,areafactor_b
                use march_b__user__routines
                external py_projection_b
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rstartb
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(numnodes) :: r_initial_march
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_smoothed
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_final
                real(kind=realtype) dimension(nsubiters,3,numnodes),intent(in),depend(nsubiters,numnodes) :: n
                integer(kind=inttype) dimension(numlayers),intent(in) :: majorindices
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                logical intent(in) :: extension_given
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype), optional,intent(in),check(len(majorindices)>=numlayers),depend(majorindices) :: numlayers=len(majorindices)
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                integer(kind=inttype), optional,intent(in),check(shape(r_initial_march,0)==nsubiters),depend(r_initial_march) :: nsubiters=shape(r_initial_march,0)
                real(kind=realtype) dimension(numlayers,3 * numnodes),depend(numlayers,numnodes) :: r
                real(kind=realtype) dimension(numlayers,3 * numnodes),depend(numlayers,numnodes) :: rb
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(numlayers - 1,numnodes - 1),depend(numlayers,numnodes) :: ratios
            end subroutine march_b
            subroutine releasememory ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
            end subroutine releasememory
            subroutine computematrices(r0,n0,s0,rm1,sm1,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,rnext,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
            end subroutine computematrices
            subroutine computematrices_b(r0,r0_b,n0,n0_b,s0,s0_b,rm1,rm1_b,sm1,sm1_b,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,rnext,rnext_b,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: computematrices_main_b
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: r0_b
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(3,numnodes),intent(out),depend(numnodes) :: n0_b
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(out),depend(numnodes) :: s0_b
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rm1_b
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                real(kind=realtype) dimension(numnodes),intent(out),depend(numnodes) :: sm1_b
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rnext_b
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
            end subroutine computematrices_b
            subroutine computematrices_d(r0,r0_d,n0,n0_d,s0,s0_d,rm1,rm1_d,sm1,sm1_d,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,rnext,rnext_d,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: computematrices_main_d
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: r0_d
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0_d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0_d
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1_d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1_d
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext_d
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
            end subroutine computematrices_d
            subroutine smoothing(r,eta,alphap0,numsmoothingpasses,numlayers,n,rout) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
            end subroutine smoothing
            subroutine smoothing_b(r,rb,eta,alphap0,numsmoothingpasses,numlayers,n,rout,routb) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: smoothing_main_b
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rb
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
                real(kind=realtype) dimension(3 * n),intent(in),depend(n) :: routb
            end subroutine smoothing_b
            subroutine smoothing_d(r,rd,eta,alphap0,numsmoothingpasses,numlayers,n,rout,routd) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: smoothing_main_d
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) dimension(3 * n),intent(in),depend(n) :: rd
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: routd
            end subroutine smoothing_d
        end module hypsurfapi
    end interface 
end python module hypsurfAPI

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
