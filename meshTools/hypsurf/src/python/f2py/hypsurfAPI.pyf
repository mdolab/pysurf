!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module march__user__routines 
    interface march_user_interface 
        subroutine py_projection(rstart,rnext,nnext,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march:unknown_interface
            real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(out) :: rnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(out) :: nnext
            integer(kind=inttype),intent(in) :: storedict
        end subroutine py_projection
    end interface march_user_interface
end python module march__user__routines
python module march_d__user__routines 
    interface march_d_user_interface 
        subroutine py_projection_d(rstart,rstartd,rnext,rnextd,nnext,nnextd,layerid,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march_d:unknown_interface
            real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
            real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rstartd
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes) :: rnext
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnext
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(out) :: rnextd
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(out) :: nnextd
            integer(kind=inttype),intent(in) :: layerid
        end subroutine py_projection_d
    end interface march_d_user_interface
end python module march_d__user__routines
python module march_b__user__routines 
    interface march_b_user_interface 
        subroutine py_projection_b(rremeshed,rremeshedb,rnext,rnextb,nnext,nnextb,projid,numnodes) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi:march_b:unknown_interface
            real(kind=realtype) dimension(3 * numnodes) :: rremeshed
            real(kind=realtype) dimension(3 * numnodes), intent(in) :: rremeshed
            real(kind=realtype) dimension(3 * numnodes), intent(out), depend(numnodes) :: rremeshedb
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnext
            real(kind=realtype) dimension(3 * numnodes),depend(numnodes),intent(in) :: rnextb
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnext
            real(kind=realtype) dimension(3,numnodes),depend(numnodes),intent(in) :: nnextb
            integer(kind=inttype),intent(in) :: projid
        end subroutine py_projection_b
    end interface march_b_user_interface
end python module march_b__user__routines
python module hypsurfAPI ! in 
    interface  ! in :hypsurfAPI
        module hypsurfapi ! in :hypsurfAPI:hypsurfAPI.F90
            use hypsurfmain
            use precision
            real(kind=realtype), allocatable,dimension(:,:,:) :: n_final
            real(kind=realtype), allocatable,dimension(:,:) :: r_initial_march
            real(kind=realtype), allocatable,dimension(:,:) :: s0_hist
            real(kind=realtype), allocatable,dimension(:,:) :: r_remeshed
            real(kind=realtype), allocatable,dimension(:,:,:) :: n_projected
            real(kind=realtype), allocatable,dimension(:,:) :: r_projected
            real(kind=realtype), allocatable,dimension(:,:) :: sm1_hist
            real(kind=realtype), allocatable,dimension(:,:) :: r_smoothed
            real(kind=realtype), allocatable,dimension(:,:) :: r_final
            subroutine march(py_projection,rstart,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,extension_given,guideindices,nu_guide_blend,retainspacing,numsmoothingpasses,numareapasses,numguides,numlayers,numnodes,r,fail,ratios,majorindices) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use march__user__routines
                external py_projection
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                logical intent(in) :: extension_given
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                real(kind=realtype) intent(in) :: nu_guide_blend
                logical intent(in) :: retainspacing
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: r
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(numlayers - 1,numnodes - 1),intent(out),depend(numlayers,numnodes) :: ratios
                integer(kind=inttype) dimension(numlayers),intent(out),depend(numlayers) :: majorindices
            end subroutine march
            subroutine march_d(py_projection_d,rstart,rstartd,r_projected_in,r_final_in,n_projected_in,n_final_in,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,guideindices,nu_guide_blend,retainspacing,extension_given,numsmoothingpasses,numareapasses,numlayers,numnodes,numguides,nsubiters_in,r,rd,fail,ratios) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use march_d__user__routines
                use hypsurfmain_d, only: computematrices_main_d,redistribute_nodes_by_arc_length_d,findratio_d,smoothing_main_d,compute_arc_length_d,findradius_d,areafactor_d
                external py_projection_d
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rstartd
                real(kind=realtype) dimension(nsubiters_in,3 * numnodes),intent(in),depend(numnodes) :: r_projected_in
                real(kind=realtype) dimension(nsubiters_in,3 * numnodes),intent(in),depend(nsubiters_in,numnodes) :: r_final_in
                real(kind=realtype) dimension(nsubiters_in,3,numnodes),intent(in),depend(nsubiters_in,numnodes) :: n_projected_in
                real(kind=realtype) dimension(nsubiters_in,3,numnodes),intent(in),depend(nsubiters_in,numnodes) :: n_final_in
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                real(kind=realtype) intent(in) :: nu_guide_blend
                logical intent(in) :: retainspacing
                logical intent(in) :: extension_given
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                integer(kind=inttype), optional,intent(in),check(shape(r_projected_in,0)==nsubiters_in),depend(r_projected_in) :: nsubiters_in=shape(r_projected_in,0)
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: r
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(out),depend(numlayers,numnodes) :: rd
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(numlayers - 1,numnodes - 1),intent(out),depend(numlayers,numnodes) :: ratios
            end subroutine march_d
            subroutine march_b(py_projection_b,rstart,rstartb,r_initial_march_in,r_smoothed_in,r_projected_in,r_remeshed_in,r_final_in,n_projected_in,n_final_in,sm1_hist_in,s0_hist_in,dstart,theta,sigmasplay,bc1,bc2,epse0,alphap0,marchparameter,nuarea,ratioguess,cmax,guideindices,nu_guide_blend,retainspacing,extension_given,numsmoothingpasses,numareapasses,numlayers,numnodes,nsubiters,numguides,numprojs,r,rb) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: computematrices_main_b,redistribute_nodes_by_arc_length_b,smoothing_main_b,findratio_b,compute_arc_length_b,areafactor_b,findradius_b
                use march_b__user__routines
                external py_projection_b
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: rstart
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rstartb
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(numnodes) :: r_initial_march_in
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_smoothed_in
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_projected_in
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_remeshed_in
                real(kind=realtype) dimension(nsubiters,3 * numnodes),intent(in),depend(nsubiters,numnodes) :: r_final_in
                real(kind=realtype) dimension(nsubiters,3,numnodes),intent(in),depend(nsubiters,numnodes) :: n_projected_in
                real(kind=realtype) dimension(nsubiters,3,numnodes),intent(in),depend(nsubiters,numnodes) :: n_final_in
                real(kind=realtype) dimension(nsubiters,numnodes),intent(in),depend(nsubiters,numnodes) :: sm1_hist_in
                real(kind=realtype) dimension(nsubiters,numnodes),intent(in),depend(nsubiters,numnodes) :: s0_hist_in
                real(kind=realtype) intent(in) :: dstart
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: alphap0
                real(kind=realtype) intent(in) :: marchparameter
                real(kind=realtype) intent(in) :: nuarea
                real(kind=realtype) intent(in) :: ratioguess
                real(kind=realtype) intent(in) :: cmax
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                real(kind=realtype) intent(in) :: nu_guide_blend
                logical intent(in) :: retainspacing
                logical intent(in) :: extension_given
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numareapasses
                integer(kind=inttype), optional,intent(in),check(shape(r,0)==numlayers),depend(r) :: numlayers=shape(r,0)
                integer(kind=inttype), optional,intent(in),check((len(rstart))/(3)>=numnodes),depend(rstart) :: numnodes=(len(rstart))/(3)
                integer(kind=inttype), optional,intent(in),check(shape(r_initial_march_in,0)==nsubiters),depend(r_initial_march_in) :: nsubiters=shape(r_initial_march_in,0)
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                integer(kind=inttype) intent(in) :: numprojs
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(in),depend(numnodes) :: r
                real(kind=realtype) dimension(numlayers,3 * numnodes),intent(in),depend(numlayers,numnodes) :: rb
            end subroutine march_b
            subroutine releasememory ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
            end subroutine releasememory
            subroutine computematrices(r0,n0,s0,rm1,sm1,layerindex,theta,sigmasplay,bc1,bc2,guideindices,retainspacing,numlayers,epse0,rnext,numnodes,numguides,nu_guide_blend) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                logical intent(in) :: retainspacing
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                real(kind=realtype) intent(in) :: nu_guide_blend
            end subroutine computematrices
            subroutine computematrices_b(r0,r0_b,n0,n0_b,s0,s0_b,rm1,rm1_b,sm1,sm1_b,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,guideindices,retainspacing,rnext,rnext_b,numnodes,numguides,nu_guide_blend) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: computematrices_main_b
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: r0_b
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(3,numnodes),intent(out),depend(numnodes) :: n0_b
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(out),depend(numnodes) :: s0_b
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rm1_b
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                real(kind=realtype) dimension(numnodes),intent(out),depend(numnodes) :: sm1_b
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                logical intent(in) :: retainspacing
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rnext_b
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                real(kind=realtype) intent(in) :: nu_guide_blend
            end subroutine computematrices_b
            subroutine computematrices_d(r0,r0_d,n0,n0_d,s0,s0_d,rm1,rm1_d,sm1,sm1_d,layerindex,theta,sigmasplay,bc1,bc2,guideindices,retainspacing,numlayers,epse0,rnext,rnext_d,numnodes,numguides,nu_guide_blend) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: computematrices_main_d
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: r0_d
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0_d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0_d
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1_d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1_d
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                logical intent(in) :: retainspacing
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext_d
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                real(kind=realtype) intent(in) :: nu_guide_blend
            end subroutine computematrices_d
            subroutine smoothing(r,eta,alphap0,numsmoothingpasses,numlayers,n,rout) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
            end subroutine smoothing
            subroutine smoothing_b(r,rb,eta,alphap0,numsmoothingpasses,numlayers,n,rout,routb) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: smoothing_main_b
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rb
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
                real(kind=realtype) dimension(3 * n),intent(in),depend(n) :: routb
            end subroutine smoothing_b
            subroutine smoothing_d(r,rd,eta,alphap0,numsmoothingpasses,numlayers,n,rout,routd) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: smoothing_main_d
                real(kind=realtype) dimension(3 * n),intent(in) :: r
                real(kind=realtype) dimension(3 * n),intent(in),depend(n) :: rd
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: rout
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: routd
            end subroutine smoothing_d
            subroutine areafactor_test_d(r0,r0d,d,dd,nuarea,numareapasses,bc1,bc2,guideindices,numguides,n,s,sd,maxstretch) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: areafactor_d
                real(kind=realtype) dimension(3 * n),intent(in) :: r0
                real(kind=realtype) dimension(3 * n),intent(in),depend(n) :: r0d
                real(kind=realtype) intent(in) :: d
                real(kind=realtype) intent(in) :: dd
                real(kind=realtype) intent(in) :: nuarea
                integer(kind=inttype) intent(in) :: numareapasses
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=n),depend(r0) :: n=(len(r0))/(3)
                real(kind=realtype) dimension(n),intent(out),depend(n) :: s
                real(kind=realtype) dimension(n),intent(out),depend(n) :: sd
                real(kind=realtype) intent(out) :: maxstretch
            end subroutine areafactor_test_d
            subroutine areafactor_test_b(r0,r0b,d,db,nuarea,numareapasses,bc1,bc2,guideindices,numguides,n,s,sb,maxstretch) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: areafactor_b
                real(kind=realtype) dimension(3 * n),intent(in) :: r0
                real(kind=realtype) dimension(3 * n),intent(out),depend(n) :: r0b
                real(kind=realtype) intent(in) :: d
                real(kind=realtype) intent(out) :: db
                real(kind=realtype) intent(in) :: nuarea
                integer(kind=inttype) intent(in) :: numareapasses
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) dimension(numguides),intent(in) :: guideindices
                integer(kind=inttype), optional,intent(in),check(len(guideindices)>=numguides),depend(guideindices) :: numguides=len(guideindices)
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=n),depend(r0) :: n=(len(r0))/(3)
                real(kind=realtype) dimension(n),intent(in),depend(n) :: s
                real(kind=realtype) dimension(n),intent(in),depend(n) :: sb
                real(kind=realtype) intent(in) :: maxstretch
            end subroutine areafactor_test_b
            subroutine findradius_test(numnodes,r0,radius) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain, only: findradius
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) intent(out) :: radius
            end subroutine findradius_test
            subroutine findradius_test_d(numnodes,r0,r0d,radius,radiusd) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: findradius_d
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: r0d
                real(kind=realtype) intent(out) :: radius
                real(kind=realtype) intent(out) :: radiusd
            end subroutine findradius_test_d
            subroutine findradius_test_b(numnodes,r0,r0b,radius,radiusb) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: findradius_b
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: r0b
                real(kind=realtype) intent(in) :: radius
                real(kind=realtype) intent(in) :: radiusb
            end subroutine findradius_test_b
            subroutine dissipationcoefficients_test(layerindex,r0_xi,r0_eta,dsensor,angle,numlayers,epse0,epse,epsi) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) dimension(3),intent(in) :: r0_xi
                real(kind=realtype) dimension(3),intent(in) :: r0_eta
                real(kind=realtype) intent(in) :: dsensor
                real(kind=realtype) intent(in) :: angle
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(out) :: epse
                real(kind=realtype) intent(out) :: epsi
            end subroutine dissipationcoefficients_test
            subroutine dissipationcoefficients_d_test(layerindex,r0_xi,r0_xid,r0_eta,r0_etad,dsensor,dsensord,angle,angled,numlayers,epse0,epse,epsed,epsi,epsid) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: dissipationcoefficients_d
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) dimension(3),intent(in) :: r0_xi
                real(kind=realtype) dimension(3),intent(in) :: r0_xid
                real(kind=realtype) dimension(3),intent(in) :: r0_eta
                real(kind=realtype) dimension(3),intent(in) :: r0_etad
                real(kind=realtype) intent(in) :: dsensor
                real(kind=realtype) intent(in) :: dsensord
                real(kind=realtype) intent(in) :: angle
                real(kind=realtype) intent(in) :: angled
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(out) :: epse
                real(kind=realtype) intent(out) :: epsed
                real(kind=realtype) intent(out) :: epsi
                real(kind=realtype) intent(out) :: epsid
            end subroutine dissipationcoefficients_d_test
            subroutine dissipationcoefficients_b_test(layerindex,r0_xi,r0_xib,r0_eta,r0_etab,dsensor,dsensorb,angle,angleb,numlayers,epse0,epse,epseb,epsi,epsib) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_b, only: dissipationcoefficients_b
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) dimension(3),intent(in) :: r0_xi
                real(kind=realtype) dimension(3),intent(out) :: r0_xib
                real(kind=realtype) dimension(3),intent(in) :: r0_eta
                real(kind=realtype) dimension(3),intent(out) :: r0_etab
                real(kind=realtype) intent(in) :: dsensor
                real(kind=realtype) intent(out) :: dsensorb
                real(kind=realtype) intent(in) :: angle
                real(kind=realtype) intent(out) :: angleb
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: epse
                real(kind=realtype) intent(in) :: epseb
                real(kind=realtype) intent(in) :: epsi
                real(kind=realtype) intent(in) :: epsib
            end subroutine dissipationcoefficients_b_test
            subroutine matrixbuilder_test(curr_index,bc1,bc2,r0,rm1,n0,s0,sm1,numlayers,epse0,layerindex,theta,numnodes,k,f) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain, only: matrixbuilder
                integer(kind=inttype) intent(in) :: curr_index
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes,3 * numnodes),intent(inout),depend(numnodes,numnodes) :: k
                real(kind=realtype) dimension(3 * numnodes),intent(inout),depend(numnodes) :: f
            end subroutine matrixbuilder_test
            subroutine matrixbuilder_d_test(curr_index,bc1,bc2,r0,r0d,rm1,rm1d,n0,n0d,s0,s0d,sm1,sm1d,numlayers,epse0,layerindex,theta,numnodes,k,kd,f,fd) ! in :hypsurfAPI:hypsurfAPI.F90:hypsurfapi
                use hypsurfmain_d, only: matrixbuilder_d
                integer(kind=inttype) intent(in) :: curr_index
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: r0d
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1d
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0d
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1d
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes,3 * numnodes),intent(inout),depend(numnodes,numnodes) :: k
                real(kind=realtype) dimension(3 * numnodes,3 * numnodes),intent(inout),depend(numnodes,numnodes) :: kd
                real(kind=realtype) dimension(3 * numnodes),intent(inout),depend(numnodes) :: f
                real(kind=realtype) dimension(3 * numnodes),intent(inout),depend(numnodes) :: fd
            end subroutine matrixbuilder_d_test
        end module hypsurfapi
    end interface 
end python module hypsurfAPI

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
