!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module hypsurf ! in
    interface  ! in :hypsurf
        module hypsurf ! in :hypsurf:hypsurf.F90
            use precision
            subroutine computematrices(r0,n0,s0,rm1,sm1,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,f,numnodes) ! in hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: f
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
            end subroutine computematrices
            subroutine areafactor(r0,d,nuarea,numareapasses,bc1,bc2,n,s,maxstretch) ! in hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * n),intent(in) :: r0
                real(kind=realtype) intent(in) :: d
                real(kind=realtype) intent(in) :: nuarea
                integer(kind=inttype) intent(in) :: numareapasses
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=n),depend(r0) :: n=(len(r0))/(3)
                real(kind=realtype) dimension(n),intent(out),depend(n) :: s
                real(kind=realtype) intent(out) :: maxstretch
            end subroutine areafactor
            subroutine smoothing(r,eta,alphap0,numsmoothingpasses,numlayers,n) ! in hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * n),intent(inout) :: r
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
            end subroutine smoothing
            subroutine qualitycheck(r,layerindex,nw1,nw2,fail,ratios) ! in hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * nw2,nw1),intent(in) :: r
                integer(kind=inttype) intent(in), optional :: layerindex
                integer(kind=inttype), optional,intent(in),check(shape(r,1)==nw1),depend(r) :: nw1=shape(r,1)
                integer(kind=inttype), optional,intent(in),check((shape(r,0))/(3)==nw2),depend(r) :: nw2=(shape(r,0))/(3)
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(nw2 - 1,nw1 - 1),intent(out),depend(nw2,nw1) :: ratios
            end subroutine qualitycheck
        end module hypsurf
    end interface
end python module hypsurf

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
