!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module subiteration__user__routines 
    interface subiteration_user_interface 
        subroutine py_projection(rnext_in,rnext,nnext,numnodes) ! in :hypsurf:hypsurf.F90:hypsurf:subiteration:unknown_interface
            real(kind=realtype) dimension(3 * numnodes) :: rnext_in
            real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
            real(kind=realtype) dimension(3,numnodes),intent(out),depend(numnodes) :: nnext
            integer(kind=inttype), optional,intent(in),check((len(rnext_in))/(3)>=numnodes),depend(rnext_in) :: numnodes=(len(rnext_in))/(3)
        end subroutine py_projection
    end interface subiteration_user_interface
end python module subiteration__user__routines
python module hypsurf ! in 
    interface  ! in :hypsurf
        module hypsurf ! in :hypsurf:hypsurf.F90
            use precision
            subroutine computematrices(r0,n0,s0,rm1,sm1,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,f,numnodes) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: f
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
            end subroutine computematrices
            subroutine matrixbuilder(curr_index,bc1,bc2,r0,rm1,n0,s0,sm1,numlayers,epse0,layerindex,theta,numnodes,k,f) ! in :hypsurf:hypsurf.F90:hypsurf
                integer(kind=inttype) intent(in) :: curr_index
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes,3 * numnodes),intent(inout),depend(numnodes,numnodes) :: k
                real(kind=realtype) dimension(3 * numnodes),intent(inout),depend(numnodes) :: f
            end subroutine matrixbuilder
            subroutine dissipationcoefficients(layerindex,r0_xi,r0_eta,dsensor,angle,numlayers,epse0,epse,epsi) ! in :hypsurf:hypsurf.F90:hypsurf
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) dimension(3),intent(in) :: r0_xi
                real(kind=realtype) dimension(3),intent(in) :: r0_eta
                real(kind=realtype) intent(in) :: dsensor
                real(kind=realtype) intent(in) :: angle
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(out) :: epse
                real(kind=realtype) intent(out) :: epsi
            end subroutine dissipationcoefficients
            subroutine areafactor(r0,d,nuarea,numareapasses,bc1,bc2,n,s,maxstretch) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * n),intent(in) :: r0
                real(kind=realtype) intent(in) :: d
                real(kind=realtype) intent(in) :: nuarea
                integer(kind=inttype) intent(in) :: numareapasses
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=n),depend(r0) :: n=(len(r0))/(3)
                real(kind=realtype) dimension(n),intent(out),depend(n) :: s
                real(kind=realtype) intent(out) :: maxstretch
            end subroutine areafactor
            subroutine smoothing(r,eta,alphap0,numsmoothingpasses,numlayers,n) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * n),intent(inout) :: r
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype) intent(in) :: numlayers
                integer(kind=inttype), optional,intent(in),check((len(r))/(3)>=n),depend(r) :: n=(len(r))/(3)
            end subroutine smoothing
            subroutine qualitycheck(r,layerindex,nw1,nw2,fail,ratios) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3 * nw2,nw1),intent(in) :: r
                integer(kind=inttype), optional,intent(in) :: layerindex
                integer(kind=inttype), optional,intent(in),check(shape(r,1)==nw1),depend(r) :: nw1=shape(r,1)
                integer(kind=inttype), optional,intent(in),check((shape(r,0))/(3)==nw2),depend(r) :: nw2=(shape(r,0))/(3)
                integer(kind=inttype) intent(out) :: fail
                real(kind=realtype) dimension(nw2 - 1,nw1 - 1),intent(out),depend(nw2,nw1) :: ratios
            end subroutine qualitycheck
            subroutine subiteration(py_projection,r0,n0,s0,rm1,sm1,layerindex,theta,sigmasplay,bc1,bc2,numlayers,epse0,eta,alphap0,numsmoothingpasses,numnodes,rnext,nnext) ! in :hypsurf:hypsurf.F90:hypsurf
                use subiteration__user__routines
                external py_projection
                real(kind=realtype) dimension(3 * numnodes),intent(in) :: r0
                real(kind=realtype) dimension(3,numnodes),intent(in),depend(numnodes) :: n0
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: s0
                real(kind=realtype) dimension(3 * numnodes),intent(in),depend(numnodes) :: rm1
                real(kind=realtype) dimension(numnodes),intent(in),depend(numnodes) :: sm1
                integer(kind=inttype) intent(in) :: layerindex
                real(kind=realtype) intent(in) :: theta
                real(kind=realtype) intent(in) :: sigmasplay
                character*32 intent(in) :: bc1
                character*32 intent(in) :: bc2
                integer(kind=inttype) intent(in) :: numlayers
                real(kind=realtype) intent(in) :: epse0
                real(kind=realtype) intent(in) :: eta
                real(kind=realtype) intent(in) :: alphap0
                integer(kind=inttype) intent(in) :: numsmoothingpasses
                integer(kind=inttype), optional,intent(in),check((len(r0))/(3)>=numnodes),depend(r0) :: numnodes=(len(r0))/(3)
                real(kind=realtype) dimension(3 * numnodes),intent(out),depend(numnodes) :: rnext
                real(kind=realtype) dimension(3,numnodes),intent(out),depend(numnodes) :: nnext
            end subroutine subiteration
            subroutine matinv3(a,b) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3,3),intent(in) :: a
                real(kind=realtype) dimension(3,3),intent(out) :: b
            end subroutine matinv3
            subroutine giveangle(r0,r1,r2,n1,angle) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3),intent(in) :: r0
                real(kind=realtype) dimension(3),intent(in) :: r1
                real(kind=realtype) dimension(3),intent(in) :: r2
                real(kind=realtype) dimension(3),intent(in) :: n1
                real(kind=realtype) intent(out) :: angle
            end subroutine giveangle
            subroutine cross(a,b,c) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3),intent(in) :: a
                real(kind=realtype) dimension(3),intent(in) :: b
                real(kind=realtype) dimension(3),intent(out) :: c
            end subroutine cross
            subroutine m33det(a,det) ! in :hypsurf:hypsurf.F90:hypsurf
                real(kind=realtype) dimension(3,3),intent(in) :: a
                real(kind=realtype) intent(out) :: det
            end subroutine m33det
        end module hypsurf
    end interface 
end python module hypsurf

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
