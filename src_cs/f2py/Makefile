HOME_DIR = ../../
COMMON_FILE = $(HOME_DIR)/common.mk
RULES_FILE  = $(HOME_DIR)/rulesSources.mk
include ${COMMON_FILE}
include ${RULES_FILE}

LINKER_ALL_FLAGS = -L$(LIBDIR) -ldiscretesurf_cs $(CGNS_LINKER_FLAGS) \
                   $(LINKER_FLAGS) $(COMPLEXIFY_LINKER_FLAGS)

CGNS_OBJECTS = fortranobject.o \
               cgnsAPI_csmodule.o \
               cgnsAPI_cs-f2pywrappers2.o

ADT_OBJECTS = fortranobject.o \
              adtAPI_csmodule.o \
              adtAPI_cs-f2pywrappers2.o

CURVE_OBJECTS = fortranobject.o \
                curveSearchAPI_csmodule.o \
                curveSearchAPI_cs-f2pywrappers2.o

INTERSECTION_OBJECTS = fortranobject.o \
                       intersectionAPI_csmodule.o \
                       intersectionAPI_cs-f2pywrappers2.o

UTILITIES_OBJECTS = fortranobject.o \
                    utilitiesAPI_csmodule.o \
                    utilitiesAPI_cs-f2pywrappers2.o

default: all

all:

# Generate Python inlude directory
	 $(eval PYTHON_INCLUDES = $(shell $(PYTHON-CONFIG) --includes))
	 @echo "#------------------------------------------------------#"
	 @echo Python Include Flags $(PYTHON_INCLUDES)
	 @echo "#------------------------------------------------------#"

# Generate Numpy inlude directory
	$(eval NUMPY_INCLUDES = $(shell $(PYTHON) -c 'import numpy; print(numpy.get_include())'))
	 @echo "#------------------------------------------------------#"
	 @echo Numpy Include Directory: $(NUMPY_INCLUDES)
	 @echo "#------------------------------------------------------#"
# Generate f2py root directory
	$(eval F2PY_ROOT = $(shell $(PYTHON) get_f2py.py))
	 @echo "#------------------------------------------------------#"
	 @echo f2py root directory: $(F2PY_ROOT)
	 @echo "#------------------------------------------------------#"

# Run f2py on signature files only
# f2py will give us C wrappers that we will compile later on.
# We do this to avoid the default compilers used by f2py.
# In summary, f2py will not compile anything, it will just generate
# the C wrapper we will compile ourselves.
	f2py cgnsAPI.pyf.autogen
	@echo " "
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) \
	-I$(F2PY_ROOT)/src -c cgnsAPI_csmodule.c

	f2py adtAPI.pyf.autogen
	@echo " "
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) \
	-I$(F2PY_ROOT)/src -c adtAPI_csmodule.c

	f2py curveSearchAPI.pyf.autogen
	@echo " "
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) \
	-I$(F2PY_ROOT)/src -c curveSearchAPI_csmodule.c

	f2py intersectionAPI.pyf.autogen
	@echo " "
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) \
	-I$(F2PY_ROOT)/src -c intersectionAPI_csmodule.c

	f2py utilitiesAPI.pyf.autogen
	@echo " "
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) \
	-I$(F2PY_ROOT)/src -c utilitiesAPI_csmodule.c

# Compile the fortran wrapper from f2py directory
	$(CC) $(CC_ALL_FLAGS) $(PYTHON_INCLUDES) -I$(NUMPY_INCLUDES) -c \
	$(F2PY_ROOT)/src/fortranobject.c -o fortranobject.o

# Compile fortran wrappers generated by f2py
	$(FF90) $(FF90_ALL_FLAGS) -I$(MODDIR) -c cgnsAPI_cs-f2pywrappers2.f90
	$(FF90) $(FF90_ALL_FLAGS) -I$(MODDIR) -c adtAPI_cs-f2pywrappers2.f90
	$(FF90) $(FF90_ALL_FLAGS) -I$(MODDIR) -c curveSearchAPI_cs-f2pywrappers2.f90
	$(FF90) $(FF90_ALL_FLAGS) -I$(MODDIR) -c intersectionAPI_cs-f2pywrappers2.f90
	$(FF90) $(FF90_ALL_FLAGS) -I$(MODDIR) -c utilitiesAPI_cs-f2pywrappers2.f90

# Link everything to make python modules
	$(FF90) -shared $(CGNS_OBJECTS) $(LINKER_ALL_FLAGS) -o cgnsAPI_cs.so
	$(FF90) -shared $(ADT_OBJECTS) $(LINKER_ALL_FLAGS) -o adtAPI_cs.so
	$(FF90) -shared $(CURVE_OBJECTS) $(LINKER_ALL_FLAGS) -o curveSearchAPI_cs.so
	$(FF90) -shared $(INTERSECTION_OBJECTS) $(LINKER_ALL_FLAGS) -o intersectionAPI_cs.so
	$(FF90) -shared $(UTILITIES_OBJECTS) $(LINKER_ALL_FLAGS) -o utilitiesAPI_cs.so

# Test if modules can be imported
	$(PYTHON) ../../src/f2py/importTest.py cgnsAPI_cs.so adtAPI_cs.so curveSearchAPI_cs.so intersectionAPI_cs.so utilitiesAPI_cs.so

# Move python modules to the main python folder
	mv *.so ../../pysurf
# Clean up temporary files
	-rm *.o
	-rm *.f90 *.c

clean:
	@echo "        Making clean in f2py... "
	rm -f $(MAKE_CLEAN_ARGUMENTS)
